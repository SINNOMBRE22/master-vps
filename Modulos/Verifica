#!/bin/bash

# ════════════════════════════════════════════════════════════════════
# VPS MÁSTER - Script de Limitador de Usuarios
# Creado por: SINNOMBRE22
# Fecha: 2025-10-17 22:37:06 UTC
# ════════════════════════════════════════════════════════════════════

u_dir="/etc/vps-master/userDIR"
tmp_verifica="/etc/master-vps/tmp_tmp"
_arquivo1="/etc/master-vps/tmp_arq1"
_arquivo2="/etc/master-vps/tmp_arq2"
_arquivo3="/etc/master-vps/tmp_arq3"
_arquivo4="/etc/master-vps/tmp_arq4"

[[ ! -d "$u_dir" ]] && mkdir -p $u_dir
[[ -e "$_arquivo1" ]] && rm $_arquivo1
[[ -e "$_arquivo2" ]] && rm $_arquivo2
[[ -e "$_arquivo3" ]] && rm $_arquivo3
[[ -e "$_arquivo4" ]] && rm $_arquivo4

# ════════════════════════════════════════════════════════════════════
# FUNCIÓN: Obtener conexiones de Dropbear
# ════════════════════════════════════════════════════════════════════
function_dropb () {  
puerto_dropbear=`ps aux | grep dropbear | awk NR==1 | awk '{print $17;}'`
[[ $puerto_dropbear = "" ]] && return
registro=/var/log/auth.log
autenticacion_exitosa='Password auth succeeded'
echo ' '
pids=`ps ax |grep dropbear |grep  " $puerto_dropbear" |awk -F" " '{print $1}'`
for pid in $pids
do
    pidlogs=`grep $pid $registro |grep "$autenticacion_exitosa" |awk -F" " '{print $3}'`
    i=0
    for pidend in $pidlogs
    do
    let i=i+1
    done
    if [ $pidend ]; then
       login=`grep $pid $registro |grep "$pidend" |grep "$autenticacion_exitosa"`
       PID=$pid
       usuario=`echo $login |awk -F" " '{print $10}' | sed -r "s/'/ /g"`
       tiempo=`echo $login |awk -F" " '{print $2"-"$1,$3}'`
       while [ ${#tiempo} -lt 13 ]; do
       tiempo=$tiempo" "
       done
       while [ ${#usuario} -lt 16 ]; do
       usuario=$usuario" "
       done
       while [ ${#PID} -lt 8 ]; do
       PID=$PID" "
       done
     echo "$usuario $PID $tiempo"
    fi
done
echo ""
return
}

# ════════════════════════════════════════════════════════════════════
# FUNCIÓN: Contar usuarios en línea
# ════════════════════════════════════════════════════════════════════
function_onlines () {
(
unset _en_linea
for usuario in `awk -F : '$3 > 900 { print $1 }' /etc/passwd |grep -v "nobody" |grep -vi polkitd |grep -vi system-`; do
numsuario=$(ps -u $usuario | grep sshd |wc -l)
[[ "$numsuario" -gt 0 ]] && _en_linea+="$numsuario+"
numsuario=$(function_dropb | grep "$usuario" | wc -l)
[[ "$numsuario" -gt 0 ]] && _en_linea+="$numsuario+"
done

# Tercera etapa - OpenVPN
for usuarioovpn in `cat /etc/passwd | grep ovpn | awk -F: '{print $1}'`; do
us=$(cat /etc/openvpn/openvpn-status.log | grep $usuarioovpn | wc -l)
[[ "$us" != "0" ]] && _en_linea+="1+"
done

# Usuarios vencidos
fechaahora=$(date +%s)
for usuario in $(awk -F: '{print $1}' /etc/passwd); do
fechavencimiento=$(chage -l $usuario|awk -F: '/Account expires/{print $2}')
echo $fechavencimiento|grep -q never && continue
datanormal=$(date -d"$fechavencimiento" '+%d/%m/%Y')
expsec=$(date +%s --date="$fechavencimiento")
diferencia=$(echo $fechaahora - $expsec|bc -l)
echo $diferencia|grep -q ^\- && continue
vencidos[1]+="1+"
done

# Haciendo la suma
_en_linea+="0"
_en_linea=$(echo $_en_linea|bc)
vencidos[1]+="0"
vencidos[1]=$(echo ${vencidos[1]}|bc)
echo "$_en_linea" > ./en_linea
echo "${vencidos[1]}" > ./vencidos
) &
}

# ════════════════════════════════════════════════════════════════════
# FUNCIÓN: Usuarios en línea de OpenVPN
# ════════════════════════════════════════════════════════════════════
fun_ovpn_onl () {
for usuarioovpn in `cat /etc/passwd | grep ovpn | awk -F: '{print $1}'`; do
us=$(cat /etc/openvpn/openvpn-status.log | grep $usuarioovpn | wc -l)
[[ "$us" != "0" ]] && echo "$usuarioovpn"
done
}

# ════════════════════════════════════════════════════════════════════
# FUNCIÓN: Tiempo de conexión de usuarios
# ════════════════════════════════════════════════════════════════════
function_usertime () {
(
declare -A datos
declare -A tiempo
declare -A tiempo2
declare -A tiempofinal
tempousuarios="./tiempo_conexion"
usr_pids_var="./userDIR"
[[ ! -e $tempousuarios ]] && touch $tempousuarios
_datos_now=$(date +%s)

for usuario in `awk -F : '$3 > 900 { print $1 }' /etc/passwd |grep -v "nobody" |grep -vi polkitd |grep -vi system-`; do
unset ssh
[[ -e $usr_pids_var/$usuario.pid ]] && source $usr_pids_var/$usuario.pid
ssh+="$(ps -u $usuario | grep sshd |wc -l)+"
ssh+="$(function_dropb | grep "$usuario" | wc -l)+"
[[ -e /etc/openvpn/server.conf ]] && ssh+="$(fun_ovpn_onl | grep "$usuario" | wc -l)+"
ssh+="0"
user_pid=$(echo $ssh|bc)

if [ "$user_pid" -gt "0" ]; then
 [[ "${datos[$usuario]}" = "" ]] && datos[$usuario]="$_datos_now"
 if [ ! -e $usr_pids_var/$usuario.pid2  ]; then
  [[ -e $usr_pids_var/$usuario.pid ]] && cp $usr_pids_var/$usuario.pid $usr_pids_var/$usuario.pid2  
 fi
fi

if [ "$user_pid" = "0" ]; then
unset datos[$usuario]
[[ -e "$usr_pids_var/$usuario.pid" ]] && rm $usr_pids_var/$usuario.pid
[[ -e $usr_pids_var/$usuario.pid2 ]] && rm $usr_pids_var/$usuario.pid2
fi

if [ "${datos[$usuario]}" != "" ]; then
tiempo[$usuario]=$(($_datos_now - ${datos[$usuario]}))
tiempo2[$usuario]=$(cat $tempousuarios | grep "$usuario" | awk '{print $2}')
  [[ "${tiempo2[$usuario]}" = "" ]] && tiempo2[$usuario]="0"
tiempofinal[$usuario]=$((${tiempo2[$usuario]} + ${tiempo[$usuario]}))
_arquivo=$(cat $tempousuarios |grep -v "$usuario")
echo "$_arquivo" > $tempousuarios
echo "$usuario ${tiempofinal[$usuario]}" >> $tempousuarios
echo "datos[$usuario]=$_datos_now" > $usr_pids_var/$usuario.pid
fi
done
) &
}

# ════════════════════════════════════════════════════════════════════
# FUNCIÓN: Matar múltiples login por usuario
# ════════════════════════════════════════════════════════════════════
function_killmultiloguin () {
(
for usuario in `awk -F : '$3 > 900 { print $1 }' /etc/passwd |grep -v "nobody" |grep -vi polkitd |grep -vi system-`; do
unset pid_limite && unset sshd_en_linea && unset drop_en_linea
sshd_en_linea=$(ps -u $usuario|grep sshd|wc -l)
drop_en_linea=$(function_dropb|grep "$usuario"|wc -l)
[[ -e $u_dir/$usuario ]] && pid_limite=$(cat $u_dir/$usuario | grep "limite:" | awk '{print $2}') || pid_limite="999"
[[ $pid_limite != +([0-9]) ]] && pid_limite="999"

# LÍMITE DROPBEAR
   [[ "$drop_en_linea" -gt "$pid_limite" ]] && {
           matar=$((${drop_en_linea}-${pid_limite}))
           pids=$(function_dropb|grep "$usuario"|awk '{print $2}'|tail -n${matar})
           for pid in `echo $pids`; do
           kill $pid
           done
    }

# LÍMITE OPENSSH
   [[ "$sshd_en_linea" -gt "$pid_limite" ]] && {
           matar=$((${sshd_en_linea}-${pid_limite}))
           pids=$(ps x|grep [[:space:]]$usuario[[:space:]]|grep -v grep|grep -v pts|awk '{print $1}'|tail -n${matar})
           for pid in `echo $pids`; do
           kill $pid
           done
    }
done
sleep 3s
) &
}

# ════════════════════════════════════════════════════════════════════
# FUNCIÓN: Monitoreo de red y paquetes
# ════════════════════════════════════════════════════════════════════
fun_net () {
(
registro_0="/tmp/tcpdum"
registro_1="/tmp/tcpdump"
registro_2="/tmp/tcpdumpLOG"
usr_dir="/etc/vps-master/userDIR/usr_cnx"
[[ -e "$registro_1" ]] &&  mv -f $registro_1 $registro_2
[[ ! -e $usr_dir ]] && touch $usr_dir

# Detiene TCP
for pd in `ps x | grep tcpdump | grep -v grep | awk '{print $1}'`; do
kill -9 $pd > /dev/null 2>&1
done

# Inicia TCP
tcpdump -s 50 -n 1> /tmp/tcpdump 2> /dev/null &
[[ ! -e /tmp/tcpdump ]] && touch /tmp/tcpdump

# Analiza usuario
for usuario in `awk -F : '$3 > 900 { print $1 }' /etc/passwd | grep -v "nobody" |grep -vi polkitd |grep -vi system-`; do
touch /tmp/$usuario
ip_openssh $usuario > /dev/null 2>&1
ip_drop $usuario > /dev/null 2>&1
sed -i '/^$/d' /tmp/$usuario
paquetes=$(paste -sd+ /tmp/$usuario | bc)
rm /tmp/$usuario

if [ "$paquetes" != "" ]; then
  if [ "$(cat $usr_dir | grep "$usuario")" != "" ]; then
  paquetesusuario=$(cat $usr_dir | grep "$usuario" | awk '{print $2}')
  [[ $paquetesusuario = "" ]] && paquetesusuario=0
  [[ $paquetesusuario != +([0-9]) ]] && paquetesusuario=0
  ussrvar=$(cat $usr_dir | grep -v "$usuario")
  echo "$ussrvar" > $usr_dir
  paquetes=$(($paquetes+$paquetesusuario))
  echo -e "$usuario $paquetes" >> $usr_dir
  else
  echo -e "$usuario $paquetes" >> $usr_dir
  fi
fi
unset paquetes
done
) &
}

# ════════════════════════════════════════════════════════════════════
# FUNCIÓN: Obtener IP de OpenSSH
# ════════════════════════════════════════════════════════════════════
ip_openssh () {
usuario="$1"
for ip in `lsof -u $usuario -P -n | grep "ESTABLISHED" | awk -F "->" '{print $2}' |awk -F ":" '{print $1}' | grep -v "127.0.0.1"`; do
 paquete=$(cat $registro_2 | grep "$ip" | wc -l)
 echo "$paquete" >> /tmp/$usuario
 unset paquete
done
}

# ════════════════════════════════════════════════════════════════════
# FUNCIÓN: Obtener IP de Dropbear
# ════════════════════════════════════════════════════════════════════
ip_drop () {
usuario="$1"
autenticacionexitosa='Password auth succeeded'
touch /tmp/drop
for ip in `cat /var/log/auth.log | tail -100 | grep "$usuario" | grep "$autenticacionexitosa" | awk -F "from" '{print $2}' | awk -F ":" '{print $1}'`; do
 if [ "$(cat /tmp/drop | grep "$ip")" = "" ]; then
 paquete=$(cat $registro_2 | grep "$ip" | wc -l)
 echo "$paquete" >> /tmp/$usuario
 echo "$ip" >> /tmp/drop
 fi
done
rm /tmp/drop
}

# ════════════════════════════════════════════════════════════════════
# INICIO DE EJECUCIÓN
# ════════════════════════════════════════════════════════════════════

killall limiter.sh > /dev/null 2>&1
kill -9 $(ps x|grep -v grep|grep limiter.sh|awk '{print $1}') 2>/dev/null

function_usertime > /dev/null 2>&1
function_killmultiloguin > /dev/null 2>&1
function_onlines > /dev/null 2>&1
fun_net > /dev/null 2>&1
